import numpy as np

####################################################
##              gun sight graphics                
####################################################
##format = dX, dy, Intesnity
reticule1 = ([0,-175,0],
            [0,100,6],
            [-75,25,0],
            [0,-25,6],
            [150,0,6],
            [0,25,6],
            [0,100,0],
            [0,25,6],
            [-150,0,6],
            [0,-25,6],
            [75,25,0],
            [0,100,6])

reticule2  =([0,-175,0],
            [0,100,14],
            [0,40,6],
            [-35,0,0],
            [-40,-40,14],
            [150,0,14],
            [-40,40,14],
            [0,70,0],
            [40,40,14],
            [-150,0,14],
            [40,-40,14],
            [35,0,0],
            [0,40,6],
            [0,100,14])


####################################################
##          windscreen crack animation frames             
####################################################
##format = dX, dy, Intesnity
windscreen=[]

windscreen.append([[-100,50,0],
                    [-75,0,12],
                    [35,-100,0],
                    [40,100,12],
                    [-100,100,12],
                    [250,25,0],
                    [-150,-125,12],
                    [100,-50,12],])

windscreen.append([[80,0,12],
                   [-220,-50,0],
                    [65,-50,12],
                    [-100,150,0],
                    [0,-45,12],
                    [-25,145,0],
                    [-150,45,12],
                    [225,30,0],
                    [-75,-75,12],
                    [250,25,0],
                    [10,95,12],
                    [-10,-95,0],
                    [100,60,12],])

windscreen.append([[100,60,12],
                    [-100,45,0],
                    [0,-105,12],
                    [-275,-10,0],
                    [-105,95,12],
                    [-120,-125,0],
                    [-50,10,12],
                    [50,-10,0],
                    [-130,-120,12],
                    [305,-70,0],
                    [-90,-5,12],
                    [190,-100,0],
                    [45,-140,12],
                    [110,240,0],
                    [0,-40,12],])

windscreen.append([[105,0,12],
                    [-215,-200,0],
                    [-80,-150,12],
                    [-155,390,0],
                    [0,-50,12],
                    [0,50,0],
                    [-85,25,12],
                    [120,295,0],
                    [-120,115,12],
                    [175,15,0],
                    [-55,-130,12],
                    [480,-25,0],
                    [70,0,12],
                    [-195,105,0],
                    [25,-60,12],
                    [75,85,12],])

windscreen.append([[-15,65,12],
                    [50,-40,0],
                    [-35,-25,12],
                    [-40,-465,0],
                    [105,100,12],
                    [-80,-160,0],
                    [-25,60,12],
                    [-10,-60,12],
                    [-250,-350,0],
                    [-35,60,12],
                    [-40,-60,12],
                    [-115,400,0],
                    [-35,-30,12],])

windscreen.append([[50,-70,12],
                    [-100,30,0],
                    [50,40,12],
                    [475,-20,0],
                    [-50,-50,12],
                    [135,600,0],
                    [15,-50,12],
                    [15,-340,0],
                    [95,-110,12],])

windscreen.append([[115,75,12],
                    [-90,-115,0],
                    [-25,40,12],
                    [-735,-70,0],
                    [-65,-15,12],])

windscreen.append([[-85,45,12],
                    [50,-95,0],
                    [35,50,12],
                    [855,-15,0],
                    [-30,60,12],
                    [80,30,12],])


####################################################
##             background horizon
####################################################
##format = dX, dy, Intesnity
scenary1 = ([0,64,0],
            [32,-32,6],
            [-16,-8,0],
            [80,40,6],
            [32,0,6],
            [32,-32,6],
            [-64,32,6],
            [0,-64,0],
            [128,64,6],
            [64,-64,6],
            [32,0,0],
            [-64,32,6],
            [-32,32,0],
            [64,-32,6],
            [64,-16,6],
            [96,-16,6],
            [48,160,0],
            [5,-12,14],
            [0,-12,14],
            [-8,-12,14],
            [-12,-12,14],
            [-12,-3,14],
            [-12,3,14],
            [12,-9,14],
            [12,-3,14],
            [12,3,14],
            [12,9,14],
            [6,12,14],
            [0,12,14],
            [-4,12,14],
            [-11,12,14],
            [-13,3,4],
            [-15,-4,4],
            [-10,-8,4],
            [-5,-11,4],
            [-2,-13,4],
            [6,-15,4],
            [27,3,0],
            [0,-4,10],
            [6,-1,10],
            [6,11,10],
            [-4,-1,10],
            [-1,2,10],
            [18,20,0],
            [-3,-3,10],
            [1,3,10],
            [-3,1,10],
            [0,6,10],
            [1,1,4],
            [7,-150,0],
            [32,0,0],
            [64,48,6],
            [32,-48,6],
            [-32,48,0],
            [32,-16,6],
            [64,32,6],
            [160,-64,6],
            [-128,32,6],
            [-32,32,6],
            [-64,-32,0],
            [96,-32,6],
            [128,0,0],
            [160,32,6],
            [0,-32,0],
            [0,32,0],
            [64,0,6],
            [0,-32,0],
            [-64,32,6],
            [64,0,0],
            [64,32,6],
            [-64,-32,0],
            [96,-32,6],
            [32,32,6],
            [-64,32,6],
            [32,0,6],
            [32,-32,6],
            [32,16,6],
            [32,-16,6],
            [-96,-32,6],
            [96,32,0],
            [64,32,6],
            [64,-32,6],
            [-96,16,0],
            [32,-16,6],
            [32,16,6],
            [0,-48,0],
            [96,8,6],
            [-64,24,6],
            [32,16,6],
            [64,-16,6],
            [-32,-24,6],
            [-32,40,6],
            [64,-16,0],
            [32,0,6],
            [0,-32,0],
            [0,32,0],
            [64,-32,6],
            [-64,32,0],
            [128,-32,6],
            [160,0,0],
            [96,32,6],
            [32,-32,6],
            [-32,32,0],
            [32,32,6],
            [32,-64,6],
            [32,0,0],
            [-64,64,6],
            [32,-32,0],
            [32,32,6],
            [32,-32,6],
            [0,-32,0],
            [0,32,0],
            [64,32,6],
            [32,-64,6],
            [32,0,0],
            [-64,64,6],
            [32,-32,0],
            [32,16,6],
            [96,-48,6],
            [128,0,0],
            [160,32,6],
            [0,-32,0],
            [0,32,0],
            [64,0,6],
            [224,-32,6],
            [-32,48,6],
            [-64,-32,6],
            [96,-16,0],
            [96,64,6],
            [64,-40,6],
            [-16,-24,0],
            [64,96,6],
            [3,-7,6],
            [5,5,6],
            [3,-6,6],
            [5,8,6],
            [0,-96,0],
            [0,96,0],
            [64,-96,6],
            [96,64,6],
            [64,-64,6],
            [64,0,0],
            [-128,64,6],
            [64,-32,0],
            [64,32,6],
            [128,-64,6],
            [-64,32,0],
            [64,16,6],
            [32,-48,6],
            [-32,48,0],
            [96,-48,6],
            [192,0,0],
            [224,32,6],
            [64,-32,6],
            [-32,16,0],
            [64,48,6],
            [0,-64,0],)


####################################################
##   explosion when player missile hits           
####################################################

explosionnodes = np.array([[-64,0,0,1],
                    [-64,-64,0,1],
                    [64,-64,0,1],
                    [96,32,0,1],
                    [64,-32,0,1],
                    [0,64,0,1],
                    [32,96,0,1],
                    [-32,96,0,1],
                    [-128,-32,0,1],
                    [-96,32,0,1]]).astype(float)


####################################################
##              pyramid obstacle                
####################################################

pyramidnodes = np.array ([[-512,-512,-320, 1],
                        [-512,512,-320, 1],
                        [512,512,-320, 1],
                        [512,-512,-320, 1],
                        [0,0,320, 1]]).astype(float)

pyramidfaces=([4,2,1],
            [4,3,2],
            [4,1,0],
            [4,0,3],
            [1,2,3,0])

pyramidedges=([0,4],
            [4,1],
            [1,0],
            [0,3],
            [3,4],
            [4,2],
            [2,3],
            [2,1])


####################################################
##           wide pyramid obstacle                ##
####################################################
widepyramidnodes =np.array ([[ -800, -800, -320, 1 ],
                            [ -800, 800, -320, 1 ],
                            [ 800, 800, -320, 1 ],
                            [ 800, -800, -320, 1 ],
                            [ 0, 0, 400, 1 ]]).astype(float)

widepyramidfaces  =pyramidfaces


####################################################
##           tallbox obstacle                     ##
####################################################
tallboxnodes=np.array([[-512,-512,-320, 1],
                        [-512,512,-320, 1],
                        [512,512,-320, 1],
                        [512,-512,-320, 1],
                        [-512,-512,320, 1],
                        [-512,512,320, 1],
                        [512,512,320, 1],
                        [512,-512,320, 1]]).astype(float)

tallboxedges=([ 1, 0],
            [ 2, 3],
            [ 3, 0],
        	[ 0, 4],
            [ 4, 5],
            [ 5, 6],
            [ 6, 7],
            [ 7, 4],
            [ 5, 1],
            [ 1, 2],
            [ 2, 6],
            [ 7, 3],)

tallboxfaces=([0,3,7,4],
              [5,1,0,4],
              [3,0,1,2],
              [6,7,3,2],
              [2,1,5,6],
              [7,6,5,4],)


####################################################
##           shortbox obstacle                     ##
####################################################
shortboxnodes =np.array ([[ -640, -640, -320, 1 ],
                        [ -640, 640, -320, 1 ],
                        [ 640, 640, -320, 1 ],
                        [ 640, -640, -320, 1 ],
                        [ -640, -640, -40, 1 ],
                        [ -640, 640, -40, 1 ],
                        [ 640, 640, -40, 1 ],
                        [ 640, -640, -40, 1 ]]).astype(float)

shortboxfaces = tallboxfaces

####################################################
##           enemy tank object                    
####################################################
tanknodes=np.array([[ -736, -512, -320, 1 ],
                    [ -736, 512, -320, 1 ],
                    [ 968, 512, -320, 1 ],
                    [ 968, -512, -320, 1 ],
                    [ -1024, -568, -208, 1 ],
                    [ -1024, 568, -208, 1 ],
                    [ 1248, 568, -208, 1 ],
                    [ 1248, -568, -208, 1 ],
                    [ -680, -344, -120, 1 ],
                    [ -680, 344, -120, 1 ],
                    [ 680, 344, -120, 1 ],
                    [ 680, -344, -120, 1 ],
                    [ -512, -168, 48, 1 ],
                    [ -512, 168, 48, 1 ],
                    [ -128, -40, -8, 1 ],
                    [ -128, 40, -8, 1 ],
                    [ 128, 40, -48, 1 ],
                    [ 128, -40, -48, 1 ],
                    [ 1120, 40, -8, 1 ],
                    [ 1120, 40, -48, 1 ],
                    [ 1120, -40, -8, 1 ],
                    [ 1120, -40, -48, 1 ],
                    [ -512, -4, 48, 1 ],
                    [ -512, -4, 80, 1 ],
                    [-506,-4,80, 1],
                    [-506,-4,48, 1],
                    [ -512, 4, 48, 1 ],
                    [ -512, 4, 80, 1 ],
                    [-506,4,80, 1],
                    [-506,4,48, 1],
                    [ -512, -80, 80, 1 ],
                    [ -432, -160, 100, 1 ],
                    [ -432, -160, 120, 1 ],
                    [ -512, -80, 140, 1 ],
                    [ -512, 80, 80, 1 ],
                    [ -432, 160, 100, 1 ],
                    [ -432, 160, 120, 1 ],
                    [ -512, 80, 140, 1 ]]).astype(float)


tankfaces=(
           [0,1,2,3],
           [5,9,10,6],
           [1,5,6,2],
           [9,13,10],
           [3,7,4,0],
           [7,11,8,4],
           [11,12,8],
           [2,6,7,3],
           [6,10,11,7],
           [10,13,12,11],
           [0,4,5,1],
           [4,8,9,5],
            [8,12,13,9],
           [19,18,20,21],
           [16,15,18,19],
           [21,20,14,17],
           [20,18,15,14],
           [17,16,19,21],
           [22,23,24,25],
           [29,28,27,26],
           [33,32,31,30],
            [36,37,34,35],
            [30,34,37,33],
            [30,31,32,33],
            [35,34,37,36],
            [33,37,34,30]
)

#nodes which relate to the rotating radar
tankanim=([30,31,32,33,34,35,36,37])

tankdetails = (  [13,9],
               [14,9],
               [15,9],
               [16,9],
               [17,9],)

#vector edges imported for 6502 code, not needed for polygons
tankedges=([ 23, 22],
            [ 12, 13],
            [ 14, 20],
            [ 20, 18],
            [ 18, 15],
            [ 15, 14],
            [ 14, 17],
            [ 17, 16],
            [ 16, 19],
            [ 19, 21],
            [ 21, 17],
            [ 15, 16],
            [ 19, 18],
            [ 20, 21],
            [ 3, 0],
            [ 0, 4],
            [ 4, 7],
            [ 7, 6],
            [ 6, 2],
            [ 2, 3],
            [ 3, 7],
            [ 7, 11],
            [ 11, 10],
            [ 10, 6],
            [ 6, 5],
            [ 5, 9],
            [ 9, 10],
            [ 10, 13],
            [ 13, 9],
            [ 9, 8],
            [ 8, 11],
            [ 11, 12],
            [ 12, 8],
            [ 8, 4],
            [ 4, 5],
            [ 5, 1],
            [ 1, 2],
            [ 1, 0])


####################################################
##           enemy fast tank object                    
####################################################
fastTanknodes = np.array([  [ 1456, 368, -320, 1 ],
                            [ -456, 552, -320, 1 ],
                            [ -456, -552, -320, 1 ],
                            [ 1456, -368, -320, 1 ],
                            [ -456, 456, -92, 1 ],
                            [ -456, -456, -92, 1 ],
                            [ 1096, 0, -276, 1 ],
                            [ -272, 272, -116, 1 ],
                            [ -456, 272, -92, 1 ],
                            [ -456, -272, -92, 1 ],
                            [ -272, -272, -116, 1 ],
                            [ -272, 184, 44, 1 ],
                            [ -456, 184, 44, 1 ],
                            [ -456, -184, 44, 1 ],
                            [ -272, -184, 44, 1 ],
                            [ 1280, 88, -44, 1 ],
                            [ 88, 88, -44, 1 ],
                            [ 88, -88, -44, 1 ],
                            [ 1280, -88, -44, 1 ],
                            [ 1280, 88, 0, 1 ],
                            [ -88, 88, 0, 1 ],
                            [ -88, -88, 0, 1 ],
                            [ 1280, -88, 0, 1 ],
                            [ -456, 0, 44, 1 ],
                            [ -456, 0, 276, 1 ]]).astype(float)


#vector edges imported for 6502 code, not needed for polygons
fastTankedges = ([ 0, 1 ],
                [ 1, 4 ],
                [ 4, 0 ],
                [ 0, 3 ],
                [ 3, 2 ],
                [ 2, 5 ],
                [ 5, 3 ],	
                [ 2, 1 ],	
                [ 4, 5 ],	
                [ 9, 10 ],
                [ 10, 6 ],
                [ 6, 14 ],
                [ 14, 13 ],
                [ 13, 9 ],
                [ 9, 8 ],
                [ 8, 7 ],
                [ 7, 6 ],
                [ 6, 11 ],
                [ 11, 12 ],
                [ 12, 8 ],
                [ 12, 13 ],
                [ 14, 11 ],
                [ 19, 22 ],
                [ 22, 21 ],
                [ 21, 20 ],
                [ 20, 16 ],
                [ 16, 15 ],
                [ 15, 18 ],
                [ 18, 17 ],
                [ 17, 16 ],
                [ 15, 19 ],
                [ 22, 18 ],
                [ 17, 21 ],
                [ 23, 24 ])


fastTankfaces = (   [0,3,2,1], #0
                    [3,0,4,5],
                    [2,3,5],
                    [0,1,4],
                    [1,2,5,4],
                    [8,9,13,12],
                    [9,10,14,13],
                    [10,6,14],
                    [6,7,11],
                    [7,8,12,11],
                    [12,13,14,11], #10
                    [6,11,14],
                    [18,15,19,22],
                    [17,18,22,21],
                    [15,16,20,19],
                    [22,19,20,21],
                    [17,16,15,18],
                    [24,24,23,23],
                    [23,23,24,24])


fastTankdetails = ([8,1],
                   [11,1],
                   [7,1],
                   [9,1],
                   [6,1],)

####################################################
##           flying saucer object                    
####################################################
saucernodes =np.array ([[-240,0,-40,1],
                    [-160,160,-40,1],
                    [0,240,-40,1],
                    [160,160,-40,1],
                    [240,0,-40,1],
                    [160,-160,-40,1],
                    [0,-240,-40,1],
                    [-160,-160,-40,1],
                    [-960,0,80,1],
                    [-680,680,80,1],
                    [0,960,80,1],
                    [680,680,80,1],
                    [960,0,80,1],
                    [680,-680,80,1],
                    [0,-960,80,1],
                    [-680,-680,80,1],
                    [0,0,280,1]],).astype(float)

sauceredges= ([ 8, 9],	[ 9, 16],	[ 16, 10],	[ 10, 11],	[ 11, 16],	[ 16, 12],	[ 12, 13],	[ 13, 16],	[ 16, 14],	[ 14, 15],	[ 15, 16],		[ 0, 7],	[ 7, 15],	[ 15, 8],	[ 8, 0],	[ 0, 1],	[ 1, 9],	[ 9, 10],	[ 10, 2],	[ 2, 3],	[ 3, 11],	[ 11, 12],	[ 12, 4],	[ 4, 5],	[ 5, 13],	[ 13, 14],	[ 14, 6],	[ 6, 7],		[ 6, 5],		[ 4, 3],		[ 2, 1],)

saucerfaces = (
            [15,16,8],
            [12,16,13],
            [11,16,12],
            [10,16,11],
            [9,16,10],
            [8,16,9],
            [9,1,0,8],
            [14,13,16],
            [15,14,16],
            [3,2,10,11],
            [7,6,14,15],
            [14,6,7,15],
            [10,2,1,9],
            [8,0,7,15],
            [6,5,13,14],
            [12,13,5,4],
            [11,12,4,3],
            [0,1,2,3,4,5,6,7],
)


####################################################
##           missile object (enemy and player                 
####################################################
projectilenodes = np.array([[ -40, -40, -40,1 ],
                            [ -40, -40, 40,1 ],
                            [ -40, 40, 40,1 ],
                            [ -40, 40, -40 ,1],
                            [ 80, 0, 0,1 ],]).astype(float)


""" projectilenodes = np.array([[ 0, -40, -40,1 ],
                            [ 0, -40, 40,1 ],
                            [ 0, 40, 40,1 ],
                            [ 0, 40, -40 ,1],
                            [ 120, 0, 0,1 ]]).astype(float) """


projectileedges = ([ 0, 4 ],	[ 4, 1 ],	[ 1, 0 ],	[ 0, 3 ],	[ 3, 4 ],	[ 4, 2 ],	[ 2, 3 ],	[ 3, 2 ],	[ 2, 1 ],)
projectilefaces = ([1,4,2],
                   [3,4,0],
                   [2,4,3],
                   [0,4,1],
                   [0,1,2,3])


####################################################
##           enemy guided missile               
####################################################
guidedmissilenodes = np.array([[ -384, 144, 0, 1 ],
                        [ -384, 72, 48, 1 ],
                        [ -384, -72, 48, 1 ],
                        [ -384, -144, 0, 1 ],
                        [ -384, -72, -48, 1 ],
                        [ -384, 72, -48, 1 ],
                        [ -96, 288, 0, 1 ],
                        [ -96, 192, 96, 1 ],
                        [ -96, -192, 96, 1 ],
                        [ -96, -288, 0, 1 ],
                        [ -96, -192, -96, 1 ],
                        [ -96, 192, -96, 1 ],
                        [ 1152, 0, 0, 1 ],
                        [ 1392, 0, 0, 1 ],
                        [ -144, -144, -168, 1 ],
                        [ -144, 144, -168, 1 ],
                        [ 144, 144, -168, 1 ],
                        [ 144, -144, -168, 1 ],
                        [ -48, -48, -92, 1 ],
                        [ -48, 48, -92, 1 ],
                        [ 48, 48, -84, 1 ],
                        [ 48, -48, -84, 1 ],
                        [ -96, 0, 96, 1 ],
                        [ 528, 72, 48, 1 ],
                        [ 528, -72, 48, 1 ],
                        [ 48, 0, 144, 1 ],]).astype(float)


guidedmissileedges = ([ 13, 12 ],
                [ 12, 6 ],
                [ 6, 0 ],
                [ 0, 1 ],
                [ 1, 7 ],
                [ 7, 8 ],
                [ 8, 9 ],
                [ 9, 10 ],
                [ 10, 11 ],
                [ 11, 6 ],
                [ 6, 7 ],
                [ 7, 12 ],
                [ 12, 8 ],
                [ 2, 3 ],
                [ 3, 9 ],
                [ 9, 12 ],
                [ 12, 10 ],
                [ 10, 4 ],
                [ 4, 5 ],
                [ 5, 11 ],
                [ 11, 12 ],
                [ 24, 23 ],
                [ 23, 22 ],
                [ 22, 24 ],
                [ 24, 25 ],	
                [ 25, 23 ],
                [ 25, 22 ],
                [ 20, 2 ],
                [ 3, 4 ],
                [ 5, 0 ],
                [ 18, 19 ],
                [ 19, 20 ],
                [ 20, 21 ],
                [ 21, 18 ],
                [ 18, 14 ],
                [ 14, 15 ],
                [ 15, 16 ],
                [ 16, 17 ],
                [ 17, 14 ],
                [ 15, 19 ],
                [20, 16 ],
                [ 17, 21 ],)

guidedmissilfaces=([24,23,25],
                   [23,22,25],
                   [24,25,22],
                   [12,6,7],
                   [12,7,8],
                   [12,8,9],
                   [12,9,10],
                   [12,11,6],
                   [10,11,12],
                   [5,4,3,2,1,0],
                   [0,1,7,6],   #10
                   [5,0,6,11],
                   [2,3,9,8],
                   [1,2,8,7],
                   [3,4,10,9],
                   [4,5,11,10],
                   [14,15,16,17],
                    [14,17,21,18],
                    [17,16,20,21],
                    [15,14,18,19],
                    [16,15,19,20],  #20
                   [12,12,13,13],
                   [13,13,12,12],)

guidedmissiledetails = ([7,20],
                        [6,17],
                        [1,4],
                        [2,4])


####################################################
##           Elite Docking Station object           
####################################################
dodonodes= np.array([[0,150,196,1],
                    [143,46,196,1],
                    [88,-121,196,1],
                    [-88,-121,196,1],
                    [-143,46,196,1],
                    [0,243,46,1],
                    [231,75,46,1],
                    [143,-196,46,1],
                    [-143,-196,46,1],
                    [-231,75,46,1],
                    [143,196,-46,1],
                    [231,-75,-46,1],
                    [0,-243,-46,1],
                    [-231,-75,-46,1],
                    [-143,196,-46,1],
                    [88,121,-196,1],
                    [143,-46,-196,1],
                    [0,-150,-196,1],
                    [-143,-46,-196,1],
                    [-88,121,-196,1],
                    [-16,32,200,1],
                    [-16,-32,200,1],
                    [16,-32,200,1],
                    [16,32,200,1],]).astype(float)

dodofaces=([0, 1, 6, 10, 5], 
			[4,3,2,1,0],
			[0, 5, 14, 9, 4], 
			[1, 2, 7, 11, 6], 
			[2, 3, 8, 12, 7], 
			[3, 4, 9, 13, 8], 
			[5, 10, 15, 19, 14], 
			[6, 11, 16, 15, 10], 
			[7, 12, 17, 16, 11], 
			[8, 13, 18, 17, 12], 
			[9, 14, 19, 18, 13], 
			[15, 16, 17, 18, 19],
            [20,21,22,23])


####################################################
##           round effect for guided missile           
####################################################
spatternodes  =[]
spatter0nodes=np.array([
                        [ 0, 52, -180 , 1],
                        [ 36, 36, -180, 1],
                        [ 52, 0, -180, 1 ],
                        [ 36, -36, -180, 1 ],
                        [ 0, -52, -180, 1 ],
                        [ -36, -36, -180, 1 ],
                        [ -52, 0, -180, 1 ],
                        [ -36, 36, -180, 1 ]]).astype(float)

spatter1nodes=np.array([[ 0, 100, -200, 1 ],
                        [ 72, 72, -200, 1 ],
                        [ 100, 0, -200, 1 ],
                        [ 72, -72, -200, 1 ],
                        [ 0, -100, -200, 1 ], 
                        [ -72, -72, -200, 1 ],
                        [ -100, 0, -200, 1 ],
                        [ -72, 72, -200, 1 ]]).astype(float)

spatter2nodes =np.array ([[ 0, 152, -220, 1 ],
                        [ 108, 108, -220, 1 ],
                        [ 152, 0, -220, 1 ],
                        [ 108, -108, -220, 1 ],
                        [ 0, -152, -220, 1 ],
                        [ -108, -108, -220, 1 ],
                        [ -152, 0, -220, 1 ],
                        [ -108, 108, -220, 1 ]]).astype(float)

spatter3nodes=np.array([[ 0, 200, -240, 1 ],
                        [ 144, 144, -240, 1 ],
                        [ 200, 0, -240, 1 ],
                        [ 144, -144, -240, 1 ],
                        [ 0, -200, -240, 1 ],
                        [ -144, -144, -240, 1 ],
                        [ -200, 0, -240, 1 ],
                        [ -144, 144, -240, 1 ]]).astype(float)

spatter4nodes =np.array ([[ 0, 252, -260, 1 ],
                        [ 176, 176, -260, 1 ],
                        [ 252, 0, -260, 1  ],
                        [ 176, -176, -260, 1 ],
                        [ 0, -252, -260, 1 ],
                        [ -176, -176, -260, 1 ],
                        [ -252, 0, -260, 1 ],
                        [ -176, 176, -260, 1 ]]).astype(float)

spatter5nodes=np.array([[ 0, 300, -280, 1 ],
                        [ 212, 212, -280, 1 ],
                        [ 300, 0, -280, 1 ],
                        [ 212, -212, -280, 1 ],
                        [ 0, -300, -280, 1 ],
                        [ -212, -212, -280, 1 ],
                        [ -300, 0, -280, 1 ],
                        [ -212, 212, -280, 1 ]]).astype(float)

spatter6nodes = np.array([[ 0, 352, -300, 1 ],
                        [ 264, 264, -300, 1 ],
                        [ 352, 0, -300, 1 ],
                        [ 264, -264, -300, 1 ],
                        [ 0, -352, -300, 1 ],
                        [ -264, -264, -300, 1 ],
                        [ -352, 0, -300, 1 ],
                        [ -264, 264, -300, 1 ]]).astype(float)

spatter7nodes =np.array ([[ 0, 400, -320, 1 ],
                        [ 284, 284, -320, 1 ],
                        [ 400, 0, -320, 1 ],
                        [ 284, -284, -320, 1 ],
                        [ 0, -400, -320, 1 ],
                        [ -284, -284, -320, 1 ],
                        [ -400, 0, -320, 1 ],
                        [ -284, 284, -320, 1 ]]).astype(float)

spatternodes  =[]
spatternodes.append(spatter0nodes)
spatternodes.append(spatter1nodes)
spatternodes.append(spatter2nodes)
spatternodes.append(spatter3nodes)
spatternodes.append(spatter4nodes)
spatternodes.append(spatter5nodes)
spatternodes.append(spatter5nodes)
spatternodes.append(spatter7nodes)


####################################################
##    explosion chunks for tanks and guided missile           
####################################################
chunk0nodes = np.array([[ 220, 0, -272, 1 ],
                        [ -320, -80, -188, 1 ],
                        [ 340, 80, -96, 1 ],
                        [ -184, 0, -356, 1 ],
                        [ -124, -80, -256, 1 ],
                        [ -116, 80, -208, 1 ]]).astype(float)
chunk0edges  =([ 0, 3 ],
                [ 3, 5 ],
                [ 5, 2 ],
                [ 2, 0 ],
                [ 0, 1 ],
                [ 1, 2 ],
                [ 2, 5 ],
                [ 5, 4 ],
                [ 4, 1 ],
                [ 4, 3 ]) 

chunk0faces=([5,1,2],
             [5,4,1],
             [5,3,4],
             [0,3,5,2],
             [1,4,2],
             [3,0,4],
             [4,0,2])



chunk1nodes = np.array([[ -240, -120, -320, 1 ],
                        [ -376, 64, -280, 1 ],
                        [ 720, 160, -384, 1 ],
                        [ 640, -120, -320, 1 ],
                        [ -40, -64, -80, 1 ],
                        [ 0, 32, -60, 1 ],
                        [ 56, -160, -200, 1 ],
                        [ 120, 200, -240, 1 ]]).astype(float)
chunk1edges = ([ 0, 1 ],
               [ 1, 2 ],
               [ 2, 3 ],
               [ 3, 0 ],
               [ 0, 4 ],
               [ 4, 6 ],
               [ 6, 7 ],
               [ 7, 5 ],
               [ 5, 4 ],
               [ 5, 1 ],
               [ 7, 2 ],
               [ 3, 6 ],)

chunk1faces=([1,0,4],
             [1,4,5],
             [5,7,1],
             [2,1,7],
             [3,2,7],
             [3,7,6],
             [6,7,5],
             [6,5,4],
             [3,6,0],
             [6,4,0],
             [2,3,0],
             [2,0,1])


chunk2nodes = np.array([[ -588, -344, -148, 1 ],
                        [ -588, 344, -148, 1 ],
                        [ 588, 344, -488, 1 ],
                        [ 588, -344, -488, 1 ],
                        [ -272, -168, -48, 1 ],
                        [ -272, 168, -48, 1 ],
                        [ 0, -40, -188, 1 ],
                        [ 0, 40, -188, 1 ],
                        [ 180, 40, -288, 1 ],
                        [ 180, -40, -288, 1 ],
                        [ 1080, 40, -500, 1 ],
                        [ 1040, 40, -536, 1 ],
                        [ 1080, -40, -500, 1 ],
                        [ 1040, -40, -536, 1 ]]).astype(float)

chunk2edges = ([ 0, 1 ],
               [ 1, 2 ],
               [ 2, 3 ],
               [ 3, 0 ],
               [ 0, 4 ],
               [ 4, 5 ],
               [ 5, 1 ],
               [ 5, 2 ],
               [ 3, 4 ],
               [ 6, 12 ],
               [ 12, 10 ],
               [ 10, 7 ],
               [ 7, 6 ],
               [ 6, 9 ],
               [ 9, 8 ],
               [ 8, 11 ],
               [ 11, 13 ],
               [ 13, 9 ],	
               [ 7, 8 ],
               [ 11, 10 ],
               [ 12, 13 ],)

chunk2faces=([0,3,4],
             [0,4,5,1],
             [2,1,5],
             [3,2,5,4],
             [2,3,0,1],
             [9,13,12,6],
             [7,10,11,8],
             [6,12,10,7],
             [9,8,11,13],
             [13,11,10,12])

chunk3nodes = np.array([[ -512, -80, 80, 1 ],
                        [ -432, -160, 100, 1 ],
                        [ -432, -160, 120, 1 ],
                        [ -512, -80, 140, 1 ],
                        [ -512, 80, 80, 1 ],
                        [ -432, 160, 100, 1 ],
                        [ -432, 160, 120, 1 ],
                        [ -512, 80, 140, 1 ]]).astype(float)

chunk3faces = ([3,2,1,0],
            [6,7,4,5],
            [0,4,7,3],
            [0,1,2,3],
            [5,4,7,6],
            [3,7,4,0])


chunk4nodes = np.array ([[ -300, -72, -184, 1 ],
                        [ -232, -168, -184, 1 ],
                        [ -232, -272, -236, 1 ],
                        [ -300, -272, -284, 1 ],
                        [ -96, 168, -204, 1 ],
                        [ 40, 12, -192, 1 ],
                        [ 40, -260, -324, 1 ],
                        [ -96, -232, -404, 1 ]]).astype(float)

chunk4edges = ([ 1, 2 ],
               [ 2, 3 ],
               [ 3, 7 ],
               [ 7, 6 ],
               [ 6, 5 ],
               [ 5, 4 ],
               [ 4, 0 ],
               [ 0, 1 ],
               [ 1, 5 ],	
               [ 6, 2 ],)

chunk4faces=([7,6,2,3],
             [3,2,6,7],
             [0,1,5,4],
             [4,5,1,0],
             [6,5,1,2],
             [2,1,5,6])


chunk5nodes = np.array([[ -80, -12, -288, 1 ],
                        [ 472, 112, -432, 1 ],
                        [ 800, -44, 12, 1 ],
                        [ 88, -16, -268, 1 ]]).astype(float)

chunk5edges=([ 0, 2 ],
             [ 2, 1 ],
             [ 1, 3 ],
             [ 3, 0 ],
             [ 0, 1 ],
             [ 2, 3 ])

chunk5faces=([3,0,1],
             [3,1,2],
             [0,3,2],
             [1,0,2])

#slow tank uses  0,1,2,3,1,0
#fast tank uses  0,1,2,1,1,0
#missile uses    1,4,0,5,0,4

chunknodes=[]
chunknodes.append(chunk0nodes)
chunknodes.append(chunk1nodes)
chunknodes.append(chunk2nodes)
chunknodes.append(chunk3nodes)
chunknodes.append(chunk4nodes)
chunknodes.append(chunk5nodes)

chunkfaces=[]
chunkfaces.append(chunk0faces)
chunkfaces.append(chunk1faces)
chunkfaces.append(chunk2faces)
chunkfaces.append(chunk3faces)
chunkfaces.append(chunk4faces)
chunkfaces.append(chunk5faces)


####################################################
##      vector letters and numbers
####################################################
characterset=[]

#tank character
characterset.append([[-6,6,12],
                    [9,3,12],
                    [3,6,12],
                    [36,-9,12],
                    [-6,-6,12],
                    [-36,0,12],
                    [18,12,0],
                    [21,0,12],
                    [0,-3,12],
                    [-9,0,12],
                    [27,-9,0],])

#A
characterset.append([[0,16,12],
                [8,8,12],
                [8,-8,12],
                [0,-16,12],
                [-16,8,0],
                [16,0,12],
                [8,-8,0]])

#B
characterset.append([[0,24,12],
                [12,0,12],
                [4,-4,12],
                [0,-4,12],
                [-4,-4,12],
                [-12,0,12],
                [12,0,0],
                [4,-4,12],
                [0,-4,12],
                [-4,-4,12],
                [-12,0,12]])

#C
characterset.append([[0,24,12],
                    [16,0,12],
                    [-16,-24,0],
                    [16,0,12]])

#D
characterset.append([[0,24,12],
                    [8,0,12],
                    [8,-8,12],
                    [0,-8,12],
                    [-8,-8,12],
                    [-8,0,12],])

#E
characterset.append([[16,0,12],
                    [-16,0,0],
                    [0,24,12],
                    [16,0,12],
                    [-4,-12,0],
                    [-12,0,12],
                    [24,-12,0],])

#F
characterset.append([[0,24,12],
                    [16,0,12],
                    [-4,-12,0],
                    [-12,0,12],
                    [24,-12,0],])

#G
characterset.append([[0,24,12],
                    [16,0,12],
                    [0,-8,12],
                    [-8,-8,0],
                    [8,0,12],
                    [0,-8,12],
                    [-16,0,12],])

#H
characterset.append([[0,24,12],
                    [0,-12,0],
                    [16,0,12],
                    [0,12,0],
                    [0,-24,12],
                    [8,0,0],])
#I
characterset.append([[16,0,12],
                    [-16,24,0],
                    [16,0,12],
                    [-8,0,0],
                    [0,-24,12],
                    [16,0,0],])
#J
characterset.append([[0,8,0],
                    [8,-8,12],
                    [8,0,12],
                    [0,24,12],
                    [8,-24,0],])
#K
characterset.append([[0,24,12],
                    [12,0,0],
                    [-12,-12,12],
                    [12,-12,12],
                    [12,0,0],])
#L
characterset.append([[0,24,12],
                    [0,-24,0],
                    [16,0,12],
                    [8,0,0],])
#M
characterset.append([[0,24,12],
                    [8,-8,12],
                    [8,8,12],
                    [0,-24,12],
                    [8,0,0],])
#N
characterset.append([[0,24,12],
                    [16,-24,12],
                    [0,24,12],
                    [8,-24,0],])
#O
characterset.append([[0,24,12],
                    [16,0,12],
                    [0,-24,12],
                    [-16,0,12],])
#P
characterset.append([[0,24,12],
                    [16,0,12],
                    [0,-12,12],
                    [-16,0,12],
                    [24,-12,0],])
#Q
characterset.append([[0,24,12],
                    [16,0,12],
                    [0,-16,12],
                    [-8,-8,12],
                    [-8,0,12],
                    [8,8,0],
                    [8,-8,12],
                    [8,0,0],])
#R
characterset.append([[0,24,12],
                    [16,0,12],
                    [0,-12,12],
                    [-16,0,12],
                    [4,0,0],
                    [12,-12,12],
                    [8,0,0],])
#S
characterset.append([[16,0,12],
                    [0,12,12],
                    [-16,0,12],
                    [0,12,12],
                    [16,0,12],
                    [8,-24,0],])
#T
characterset.append([[0,24,0],
                    [16,0,12],
                    [-8,0,0],
                    [0,-24,12],
                    [16,0,0],])
#U
characterset.append([[0,24,0],
                    [0,-24,12],
                    [16,0,12],
                    [0,24,12],
                    [8,-24,0],])
#V
characterset.append([[0,24,0],
                    [8,-24,12],
                    [8,24,12],
                    [8,-24,0],])
#W
characterset.append([[0,24,0],
                    [0,-24,12],
                    [8,8,12],
                    [8,-8,12],
                    [0,24,12],
                    [8,-24,0],])
#X
characterset.append([[16,24,12],
                    [-16,0,0],
                    [16,-24,12],
                    [8,0,0],])
#Y
characterset.append([[8,0,0],
                    [0,16,12],
                    [-8,8,12],
                    [16,0,0],
                    [-8,-8,12],
                    [16,-16,0],])
#Z
characterset.append([[0,24,0],
                    [16,0,12],
                    [-16,-24,12],
                    [16,0,12],
                    [8,0,0],])
#space
characterset.append([])

#O
characterset.append([[0,24,12],
                    [16,0,12],
                    [0,-24,12],
                    [-16,0,12],])

#1
characterset.append([[8,24,0],
                    [0,-24,12],
                    [16,0,0],])

#2
characterset.append([[0,24,0],
                    [16,0,12],
                    [0,-12,12],
                    [-16,0,12],
                    [0,-12,12],
                    [16,0,12]])

#3
characterset.append([[0,24,0],
                    [16,0,12],
                    [0,-24,12],
                    [-16,0,12],
                    [0,12,0],
                    [16,0,12],
                    [8,-12,0],])
#4
characterset.append([[0,24,0],
                    [0,-12,12],
                    [16,0,12],
                    [0,12,0],
                    [0,-24,12],
                    [8,0,0],])
#5
characterset.append([[16,0,12],
                    [0,12,12],
                    [-16,0,12],
                    [0,12,12],
                    [16,0,12],
                    [8,-24,0],])
#6
characterset.append([[0,12,0],
                    [16,0,12],
                    [0,-12,12],
                    [-16,0,12],
                    [0,24,12],
                    [24,-24,0],])
#7
characterset.append([[0,24,0],
                    [16,0,12],
                    [0,-24,12],
                    [8,0,0],])
#8
characterset.append([[0,24,12],
                    [16,0,12],
                    [0,-24,12],
                    [-16,0,12],
                    [0,12,0],
                    [16,0,12],
                    [8,-12,0],])

#9
characterset.append([[16,12,0],
                    [-16,0,12],
                    [0,12,12],
                    [16,0,12],
                    [0,-24,12],
                    [8,0,0],])

#-
characterset.append([[16,0,12],
                    [8,0,0]])


####################################################
##           BattleZone title screen logo        
####################################################
titlenodes=[]
titleedges=[]

logonodes = np.array([[ 224, 5120, 32, 1 ],
                    [ 224, 3840, 32, 1 ],
                    [ 672, 3200, 88, 1 ],
                    [ 1120, 3520, 144, 1 ],
                    [ 1600, 3200, 200, 1 ],
                    [ 2048, 3840, 256, 1 ],
                    [ 2048, 5120, 256, 1 ],
                    [ 672, 4480, 88, 1 ],
                    [ 672, 4160, 88, 1 ],
                    [ 1120, 4480, 144, 1 ],
                    [ 1600, 4160, 200, 1 ],
                    [ 1600, 4480, 200, 1 ],
                    [ 224, 3200, 32, 1 ],
                    [ 520, 2240, 88, 1 ],
                    [ 224, 1280, 32, 1 ],
                    [ 2048, 2240, 256, 1 ],
                    [ 896, 2560, 112, 1 ],
                    [ 1024, 2240, 128, 1 ],
                    [ 896, 1920, 112, 1 ],
                    [ 1344, 2240, 168, 1 ],
                    [ 224, 640, 32, 1 ],
                    [ 1600, 320, 200, 1 ],
                    [ 1600, -640, 200, 1 ],
                    [ 224, -960, 32, 1 ],
                    [ 1600, -1280, 200, 1 ],
                    [ 1600, -2240, 200, 1 ],
                    [ 224, -2240, 32, 1 ],
                    [ 224, -3840, 32, 1 ],
                    [ 448, -5440, 56, 1 ],
                    [ 672, -4480, 88, 1 ],
                    [ 896, -4480, 112, 1 ],
                    [ 1120, -5120, 144, 1 ],
                    [ 1344, -4480, 168, 1 ],
                    [ 1600, -4480, 200, 1 ],
                    [ 1824, -5440, 224, 1 ],
                    [ 2048, -3840, 256, 1 ],
                    [ 672, -2880, 88, 1 ],
                    [ 2048, -2880, 256, 1 ],
                    [ 2048, 1920, 256, 1 ],
                    [ 1600, 1920, 200, 1 ],
                    [ 1600, 960, 200, 1 ],
                    [ -2048, 4800, -256, 1 ],
                    [ -2048, 2240, -256, 1 ],
                    [ -1600, 3520, -200, 1 ],
                    [ -224, 2240, -32, 1 ],
                    [ -224, 4800, -32, 1 ],
                    [ -672, 3520, -88, 1 ],
                    [ -2048, 320, -256, 1 ],
                    [ -224, 320, -32, 1 ],
                    [ -1600, 1600, -200, 1 ],
                    [ -1600, 960, -200, 1 ],
                    [ -672, 960, -88, 1 ],
                    [ -672, 1600, -88, 1 ],
                    [ -2048, 0, -256, 1 ],
                    [ -1120, -640, -144, 1 ],
                    [ -2048, -2560, -256, 1 ],
                    [ -1824, -4160, -224, 1 ],
                    [ -1600, -3200, -200, 1 ],
                    [ -1344, -3200, -168, 1 ],
                    [ -1120, -3840, -144, 1 ],
                    [ -896, -3200, -112, 1 ],
                    [ -672, -3200, -88, 1 ],
                    [ -448, -4160, -56, 1 ],
                    [ -224, -2560, -32, 1 ],
                    [ -1120, -1920, -144, 1 ],
                    [ -224, 0, -32, 1 ],]).astype(float)

logoedges=         ([[ 0, 1 ],
                   [ 1, 2 ],
                   [ 2, 3 ],
                   [ 3, 4 ],
                   [ 4, 5 ],
                   [ 5, 6 ],
                   [ 6, 0 ],
                   [ 7, 8 ],
                   [ 8, 9 ],
                   [ 9, 10 ],
                   [ 10, 11 ],
                   [ 11, 7 ],
                   [ 12, 13 ],
                   [ 13, 14 ],
                   [ 14, 15 ],
                   [ 15, 12 ],
                   [ 16, 17 ],
                   [ 17, 18 ],
                   [ 18, 19 ],
                   [ 19, 16 ],
                   [ 20, 21 ],
                   [ 21, 22 ],
                   [ 22, 23 ],
                   [ 23, 24 ],
                   [ 24, 25 ],
                   [ 25, 26 ],
                   [ 26, 27 ],
                   [ 27, 28 ],
                   [ 28, 29 ],
                   [ 29, 30 ],
                   [ 30, 31 ],
                   [ 31, 32 ],
                   [ 32, 33 ],
                   [ 33, 34 ],
                   [ 34, 35 ],
                   [ 35, 27 ],
                   [ 27, 36 ],
                   [ 36, 37 ],
                   [ 37, 38 ],
                   [ 38, 39 ],
                   [ 39, 40 ],
                   [ 40, 20 ],
                   [ 42, 41 ],
                   [ 41, 46 ],
                   [ 46, 45 ],
                   [ 45, 44 ],
                   [ 44, 43 ],
                   [ 43, 42 ],
                   [ 42, 44 ],
                   [ 44, 48 ],
                   [ 48, 47 ],
                   [ 47, 42 ],
                   [ 50, 49 ],
                   [ 49, 52 ],
                   [ 52, 51 ],
                   [ 51, 50 ],	
                   [ 55, 63 ],
                   [ 63, 64 ],
                   [ 64, 65 ],
                   [ 65, 53 ],
                   [ 53, 54 ],
                   [ 54, 55 ],
                   [ 55, 56 ],
                   [ 56, 57 ],
                   [ 57, 58 ],
                   [ 58, 59 ],
                   [ 59, 60 ],
                   [ 60, 61 ],
                   [ 61, 62 ],
                   [ 62, 63 ],])

